import os
import random
from pathlib import Path

import requests
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv

CONFIG_DIR = Path(__file__).resolve().parent.parent
load_dotenv(os.path.abspath(CONFIG_DIR / "config" / ".env"))
BOT_TOKEN = os.getenv("BOTTOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

ikb = InlineKeyboardMarkup(row_width=2)
ib1 = InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", url="http://127.0.0.1:8000/")
ib2 = InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏", url="http://127.0.0.1:8000/news/")
ib3 = InlineKeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω", url="http://127.0.0.1:8000/shop/")
ib4 = InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url="http://127.0.0.1:8000/register/")
ikb.add(ib1, ib2).add(ib3, ib4)

_NP_PHOTO_PATH = os.path.abspath(CONFIG_DIR / "papaya")

DESC_COMMAND = """
<b>/start</b> - <em>–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞;</em>
<b>/location</b> - <em>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞ papayagame;</em>
<b>/give_adr</b> - <em>—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç papayagame;</em>
<b>–£–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b> - <em>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∞–≥–∞–∑–∏–Ω–∞ papayagame</em>
<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞</b> - <em>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ papayagame</em>
<b>–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä</b> - <em>–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ papayagame</em>"""


def get_buttons(buttons: list):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*buttons)
    return keyboard


async def on_startup(_):
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    keyboard = get_buttons(["/start", "/description", "/give_adr"])
    await message.answer(
        "<i>–ü—Ä–∏–≤–µ—Ç</i>, <b>–ø–∞–ø–∞—ë–Ω–æ–∫</b> ü•≠", reply_markup=keyboard, parse_mode="HTML"
    )
    await message.delete()


@dp.message_handler(commands="description")
async def desc_command(message: types.Message):
    await message.answer(
        "ü´° –Ø –∑–Ω–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:"
        " \n" + DESC_COMMAND + "\n ... –∞ —Ç–∞–∫–∂–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –º–Ω–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∏–∫–µ—Ä. \n"
        "–ü–æ–∫–∞ –≤–æ—Ç –≤–∞–º –∫–æ—Ç–∏–∫:",
        parse_mode="HTML",
    )
    keyboard = get_buttons(
        [
            "/start",
            "/location",
            "/give_adr",
            "–£–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞",
            "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞",
            "–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
        ]
    )
    await bot.send_sticker(
        message.from_user.id,
        reply_markup=keyboard,
        sticker="CAACAgIAAxkBAAEI5RlkWBFnPNZ_sHdS1ynt0yAy85G0jAACBAADnmyTLl0puI2aiCV1LwQ",
    )
    await message.delete()


@dp.message_handler(commands="location")
async def desc_command(message: types.Message):
    await bot.send_message(message.from_user.id, text="–ú–∞–≥–∞–∑–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å: \n")
    await bot.send_location(
        message.from_user.id, latitude=57.861638, longitude=28.197695
    )
    await message.delete()


@dp.message_handler(commands="give_adr")
async def adr_need(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏:", reply_markup=ikb)
    await message.delete()


@dp.message_handler(Text(equals="–£–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞"))
async def categories_command(message: types.Message):
    result = requests.get("http://127.0.0.1:8000/api/category-list/")
    reply = "–í–æ—Ç —Å–º–æ—Ç—Ä–∏: \n"
    for i in result.json():
        reply += str("-" + "<u>" + i["category"] + "</u>" + "\n")
    await message.reply(reply, parse_mode="HTML")


@dp.message_handler(Text(equals="–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä"))
async def find_goods(message: types.Message):
    keyboard = get_buttons(["–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ü–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"])
    await message.reply(
        "–ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä: \n "
        "<b>1.</b><em>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</em> \n "
        "<b>2.</b><em>–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–ö–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤, –≤—Ä–µ–º—è –∏–≥—Ä—ã –∏ —Ç.–ø.) \n</em>"
        "<b>3.–ü–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤</b><em>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, "
        "–∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–≥—Ä—ã</em>",
        parse_mode="HTML",
        reply_markup=keyboard,
    )


@dp.message_handler(Text(equals="–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞"))
async def last_news(message: types.Message):
    try:
        result = requests.get("http://127.0.0.1:8000/api/last-news/")
        reply = "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å: \n"
        reply += str("<b>" + result.json()["title"] + "</b>" + "\n")
        reply += str(result.json()["news"] + "\n")
        reply += str("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:" + str(result.json()["pub_date"][:10]) + "\n")
        pic = open(
            (str(_NP_PHOTO_PATH) + "/" + str(result.json()["picture"])).replace(
                "\\", "/"
            ),
            "rb",
        )
        await bot.send_photo(
            message.from_user.id,
            photo=pic,
            caption=str(reply),
            reply_to_message_id=message.message_id,
            parse_mode="html"
        )
    except Exception:
        await message.answer(text='–ù–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å–∞–π—Ç–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç.')


@dp.message_handler(Text(equals="–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
async def search_by_category(message: types.Message):
    cat_list = requests.get("http://127.0.0.1:8000/api/category-list/")
    buttons = []
    for i in cat_list.json():
        buttons.append(i["category"])
    keyboard = get_buttons(buttons)
    answer = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫."
    await bot.send_message(message.from_user.id, answer, reply_markup=keyboard)


@dp.message_handler()
async def try_category(message: types.Message):
    try:
        result = requests.get(
            f"http://127.0.0.1:8000/api/game-by-category/?cat_games_search={message.text}"
        )
        reply = "–í–æ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \n"
        for i in result.json():
            reply += str(
                "-" + "<u>" + str(i["title"]) + "</u>" + str(i["price"]) + "‚ÇΩ" + "\n"
            )
        keyboard = get_buttons(
            [
                "/start",
                "/location",
                "–£–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞",
                "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞",
                "–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
            ]
        )
        await message.reply(reply, parse_mode="HTML", reply_markup=keyboard)
    except Exception:
        await try_search(message)


@dp.message_handler()
async def try_search(message: types.Message):
    try:
        result = requests.get(
            f"http://127.0.0.1:8000/api/game-by-name/?games_search={message.text}"
        )
        reply = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª: \n" + "–ò–≥—Ä–∞:"
        reply += str("<i>" + result.json()["title"] + "</i>" + "\n")
        reply += str(result.json()["games"] + "\n") + "–°—Ç–æ–∏–º–æ—Å—Ç—å:"
        reply += str(result.json()["price"]) + "<b>" + "‚ÇΩ" + "</b>" + "\n"
        reply += (
            "<i>"
            + "–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ, —É–∂–µ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω–æ–π "
            "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç —Å—É–∑–∏—Ç—å –∫—Ä—É–≥, –ª–∏–±–æ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
            + "</i>"
        )
        keyboard = get_buttons(
            [
                "/start",
                "/location",
                "–£–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞",
                "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞",
                "–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
            ]
        )
        pic = open(
            (str(_NP_PHOTO_PATH) + "/" + str(result.json()["picture"])).replace(
                "\\", "/"
            ),
            "rb",
        )
        await bot.send_photo(
            message.from_user.id,
            photo=pic,
            caption=str(reply),
            reply_to_message_id=message.message_id,
            parse_mode="html",
            reply_markup=keyboard,
        )
    except Exception:
        await echo(message)


@dp.message_handler(content_types=["sticker"])
async def random_sticker(message: types.Message):
    stick_list = [
        "CAACAgIAAxkBAAEI66FkWjQgx4fVZ4_ilcIMtqmSSV4XjwACBwADwDZPE0hhd1MIpyLHLwQ",
        "CAACAgIAAxkBAAEI66NkWjQmc80lwe2MGZKhUpaGYrOrOQACFgADwDZPE2Ah1y2iBLZnLwQ",
        "CAACAgIAAxkBAAEI7jdkW2ct7QwWXcwT0Roq6YTvpIy6JgACGAADwDZPE9b6J7-cahj4LwQ",
        "CAACAgIAAxkBAAEI7jlkW2c0ay0vbCgRJnRjoL28ugABpxwAAhAAA8A2TxPqgYop8R8C6C8E",
        "CAACAgIAAxkBAAEI7jtkW2c52Vl5OcmfMPLx6IRrY_IfSAACHgADwDZPE6FgWy2rAAHeBC8E",
        "CAACAgIAAxkBAAEI7j1kW2dAVO4w7Ov4yS0Ir3HtkOYUxwACWRgAAnNiCEpMsznZWoSrVy8E",
        "CAACAgIAAxkBAAEI7j9kW2dKCiAQkM5OIAXPc_ob4-UzHAACLQADoYxBCxo5ICfAtt_4LwQ",
        "CAACAgIAAxkBAAEI7kFkW2dXiP4vBGgBSbrWvw1KmujWxwACjAADFkJrCkKO_mIXPU3iLwQ",
    ]
    id_stick = random.choice(stick_list)
    keyboard = get_buttons(
        [
            "/start",
            "/location",
            "/give_adr",
            "–£–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞",
            "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞",
            "–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
        ]
    )
    await bot.send_sticker(
        message.from_user.id, sticker=id_stick, reply_markup=keyboard
    )


@dp.message_handler()
async def echo(message: types.Message):
    keyboard = get_buttons(
        [
            "/start",
            "/location",
            "/give_adr",
            "–£–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞",
            "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞",
            "–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä",
        ]
    )
    text = "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –º–Ω–µ –ø–∏—à–µ—à—å, —á–µ–ª–æ–≤–µ–∫ ü´£"
    await bot.send_message(message.from_user.id, text, reply_markup=keyboard)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
